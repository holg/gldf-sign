name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: gldf-sign

jobs:
  build:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-unknown-freebsd
            os: docker://frolvlad/freebsd-cross:latest

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev gcc-aarch64-linux-gnu

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Run tests
      run: cargo test --verbose

    - name: Prepare universal binary (macOS)
      if: matrix.target == 'x86_64-apple-darwin' || matrix.target == 'aarch64-apple-darwin'
      run: |
        mkdir -p target/universal
        lipo -create -output target/universal/${{ env.BINARY_NAME }} target/x86_64-apple-darwin/release/${{ env.BINARY_NAME }} target/aarch64-apple-darwin/release/${{ env.BINARY_NAME }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install cross
      run: cargo install cross

    - name: Setup release
      run: |
        mkdir release
        cp target/*/release/${{ env.BINARY_NAME }} release/${{ env.BINARY_NAME }}-${{ matrix.target }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/${{ env.BINARY_NAME }}-${{ matrix.target }}
        asset_name: ${{ env.BINARY_NAME }}-${{ matrix.target }}
        asset_content_type: application/octet-stream
