name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: gldf-sign

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-freebsd

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Build on Debian Bullseye for Linux ARM64
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        docker run --rm -v $(pwd):/workdir -w /workdir debian:bullseye bash -c "
        apt-get update &&
        apt-get install -y curl build-essential pkg-config libssl-dev &&
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y &&
        source $HOME/.cargo/env &&
        rustup target add ${{ matrix.target }} &&
        cargo build --release --target=${{ matrix.target }}
        "

    - name: Build
      if: matrix.target != 'aarch64-unknown-linux-gnu'
      run: cargo build --release --target=${{ matrix.target }}

    - name: Run tests
      run: cargo test --verbose

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Build and package
      run: |
        cargo build --release
        tar czf ${{ env.BINARY_NAME }}-${{ github.sha }}-x86_64-unknown-linux-gnu.tar.gz -C target/release ${{ env.BINARY_NAME }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.sha }}
        release_name: Release ${{ github.sha }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.BINARY_NAME }}-${{ github.sha }}-x86_64-unknown-linux-gnu.tar.gz
        asset_name: ${{ env.BINARY_NAME }}-${{ github.sha }}-x86_64-unknown-linux-gnu.tar.gz
        asset_content_type: application/gzip
