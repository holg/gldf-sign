name: Rust CI and Release

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: gldf-sign

jobs:
  build_and_test:
    name: Build and Test ${{ matrix.target }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        target: [x86_64-unknown-linux-gnu, x86_64-pc-windows-msvc, x86_64-apple-darwin, aarch64-apple-darwin, x86_64-unknown-freebsd, aarch64-unknown-linux-gnu]
        exclude:
          - os: ubuntu-latest
            target: x86_64-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-unknown-freebsd
          - os: windows-latest
            target: aarch64-unknown-linux-gnu
          - os: macOS-latest
            target: x86_64-unknown-linux-gnu
          - os: macOS-latest
            target: x86_64-pc-windows-msvc
          - os: macOS-latest
            target: x86_64-unknown-freebsd
          - os: macOS-latest
            target: aarch64-unknown-linux-gnu

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install OpenSSL (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install libssl-dev

      - name: Install OpenSSL (macOS)
        if: matrix.os == 'macOS-latest'
        run: brew install openssl

      - name: Build
        run: cargo build --release --target ${{ matrix.target }} --verbose

      - name: Test
        run: cargo test --target ${{ matrix.target }} --verbose

      - name: Create Universal Binary (macOS)
        if: matrix.os == 'macOS-latest'
        run: |
          mkdir -p target/universal
          if [[ -f target/x86_64-apple-darwin/release/${{ env.BINARY_NAME }} ]] && [[ -f target/aarch64-apple-darwin/release/${{ env.BINARY_NAME }} ]]; then
            lipo -create -output target/universal/${{ env.BINARY_NAME }} target/x86_64-apple-darwin/release/${{ env.BINARY_NAME }} target/aarch64-apple-darwin/release/${{ env.BINARY_NAME }}
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}

  release:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.BINARY_NAME }}-${{ matrix.target }}
          asset_name: ${{ env.BINARY_NAME }}-${{ matrix.target }}
          asset_content_type: application/octet-stream
