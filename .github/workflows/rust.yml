name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: gldf-sign

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose

  release:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        target: ["aarch64-unknown-linux-gnu", "aarch64-pc-windows-msvc", "x86_64-apple-darwin", "aarch64-apple-darwin"]
    steps:
    - uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        target: ${{ matrix.target }}
    
    - name: Build Release for Ubuntu and Windows
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'windows-latest'
      run: cargo build --release --target ${{ matrix.target }}

    - name: Build Release for macOS (x86_64)
      if: matrix.os == 'macOS-latest' && matrix.target == 'x86_64-apple-darwin'
      run: cargo build --release --target x86_64-apple-darwin

    - name: Build Release for macOS (aarch64)
      if: matrix.os == 'macOS-latest' && matrix.target == 'aarch64-apple-darwin'
      run: cargo build --release --target aarch64-apple-darwin

    - name: Create Universal Binary for macOS
      if: matrix.os == 'macOS-latest'
      run: |
        lipo -create -output target/universal/${{ env.BINARY_NAME }} target/x86_64-apple-darwin/release/${{ env.BINARY_NAME }} target/aarch64-apple-darwin/release/${{ env.BINARY_NAME }}

    - name: Upload Release Asset
      uses: actions/upload-artifact@v2
      with:
        name: release-${{ matrix.os }}
        path: target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}
